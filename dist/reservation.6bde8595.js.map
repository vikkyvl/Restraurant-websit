{"mappings":"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","sources":["src/js/reservation.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    const dateInput = document.getElementById('date');\r\n    const timeSelect = document.getElementById('time');\r\n    const reservationForm = document.getElementById('reservation-form');\r\n  \r\n    if (!dateInput || !timeSelect || !reservationForm) {\r\n      console.error('One or more elements were not found in the DOM.');\r\n      return;\r\n    }\r\n  \r\n    const today = new Date();\r\n    const formattedDate = today.toISOString().split('T')[0];\r\n    dateInput.min = formattedDate;\r\n  \r\n    function clearTimeSelect() {\r\n      timeSelect.innerHTML = '';\r\n      const placeholderOption = document.createElement('option');\r\n      placeholderOption.value = '';\r\n      placeholderOption.disabled = true;\r\n      placeholderOption.selected = true;\r\n      placeholderOption.textContent = '';\r\n      timeSelect.appendChild(placeholderOption);\r\n    }\r\n  \r\n    async function loadAvailableTimeSlots(selectedDate) {\r\n      clearTimeSelect();\r\n  \r\n      if (!selectedDate) {\r\n        return;\r\n      }\r\n  \r\n      try {\r\n        const response = await fetch('http://localhost:3000/unavailableTimeSlots');\r\n        if (!response.ok) throw new Error('Failed to fetch unavailable time slots');\r\n  \r\n        const unavailableTimeSlots = await response.json();\r\n        const allTimeSlots = [];\r\n        for (let hour = 10; hour <= 23; hour++) {\r\n          for (let minute = 0; minute < 60; minute += 30) {\r\n            const timeString = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;\r\n            allTimeSlots.push(timeString);\r\n          }\r\n        }\r\n  \r\n        const unavailableForDate = unavailableTimeSlots.find(slot => slot.date === selectedDate);\r\n        const availableTimeSlots = unavailableForDate\r\n          ? allTimeSlots.filter(time => !unavailableForDate.timeslots.includes(time))\r\n          : allTimeSlots;\r\n  \r\n        if (availableTimeSlots.length > 0) {\r\n          availableTimeSlots.forEach(time => {\r\n            const option = document.createElement('option');\r\n            option.value = time;\r\n            option.textContent = time;\r\n            timeSelect.appendChild(option);\r\n          });\r\n        } else {\r\n          const noOption = document.createElement('option');\r\n          noOption.textContent = 'No available times';\r\n          noOption.disabled = true;\r\n          timeSelect.appendChild(noOption);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching or processing time slots:', error);\r\n        alert('Failed to load available time slots. Please try again later.');\r\n      }\r\n    }\r\n  \r\n    dateInput.addEventListener('change', () => {\r\n      loadAvailableTimeSlots(dateInput.value);\r\n    });\r\n  \r\n    function resetForm() {\r\n      reservationForm.reset();\r\n      clearTimeSelect();\r\n    }\r\n  \r\n    reservationForm.addEventListener('submit', async (event) => {\r\n        event.preventDefault();\r\n      \r\n        const date = dateInput.value;\r\n        const time = timeSelect.value;\r\n        const people = parseInt(document.getElementById('people').value, 10);\r\n        const name = document.getElementById('name').value.trim();\r\n        const phone = document.getElementById('phone').value.trim();\r\n      \r\n        if (!date || !time) {\r\n          alert('Please select a valid date and time.');\r\n          return;\r\n        }\r\n      \r\n        try {\r\n          const reservation = { date, time, people, name, phone };\r\n          const reservationResponse = await fetch('http://localhost:3000/reservations', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(reservation),\r\n          });\r\n      \r\n          if (!reservationResponse.ok) {\r\n            const errorText = await reservationResponse.text();\r\n            console.error('Reservation POST error:', errorText);\r\n            throw new Error('Failed to create reservation');\r\n          }\r\n      \r\n          const unavailableResponse = await fetch('http://localhost:3000/unavailableTimeSlots');\r\n          if (!unavailableResponse.ok) throw new Error('Failed to fetch unavailable time slots');\r\n      \r\n          const unavailableTimeSlots = await unavailableResponse.json();\r\n          let unavailableForDate = unavailableTimeSlots.find(slot => slot.date === date);\r\n      \r\n          if (!unavailableForDate) {\r\n            unavailableForDate = { date, timeslots: [time], id: Date.now().toString() };\r\n            const createResponse = await fetch('http://localhost:3000/unavailableTimeSlots', {\r\n              method: 'POST',\r\n              headers: { 'Content-Type': 'application/json' },\r\n              body: JSON.stringify(unavailableForDate),\r\n            });\r\n      \r\n            if (!createResponse.ok) {\r\n              console.error('Failed to create new unavailable slot:', await createResponse.text());\r\n              throw new Error('Failed to create unavailable time slot');\r\n            }\r\n          } else {\r\n            if (!unavailableForDate.timeslots.includes(time)) {\r\n              unavailableForDate.timeslots.push(time);\r\n      \r\n              const updateResponse = await fetch(`http://localhost:3000/unavailableTimeSlots/${unavailableForDate.id}`, {\r\n                method: 'PUT',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(unavailableForDate),\r\n              });\r\n      \r\n              if (!updateResponse.ok) {\r\n                console.error('Failed to update unavailable slot:', await updateResponse.text());\r\n                throw new Error('Failed to update unavailable time slot');\r\n              }\r\n            }\r\n          }\r\n      \r\n          resetForm();\r\n      \r\n          alert(`Reservation confirmed for ${time} on ${date}.`);\r\n        } catch (error) {\r\n          console.error('Detailed error:', error.message, error);\r\n          alert('An error occurred while processing your reservation.');\r\n        }\r\n      });      \r\n});\r\n\r\n  \r\n  \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":[],"version":3,"file":"reservation.6bde8595.js.map","sourceRoot":"/__parcel_source_root/"}